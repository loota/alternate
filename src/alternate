#!/usr/bin/php
<?php

class Alternative
{
  public $configurationDirectory = '/home/heikki/share/alternate/';

  public function getAlternative($requested)
  {
    # TODO Separate the configuration to its own file.

    // TODO Make the special cases configurable.
    if ($requested == 'if') {
      $fileContentArray = explode('\n', $this->fileContent);
      foreach ($fileContentArray as $fileContentLine) {
        if (preg_match('/^\s*if\s*\((\S*)\s*==\s*(\S*)\)/', $fileContentLine, $matches)) {
          $switchCase = "switch (" . $matches[1] . ") {\n";
          $switchCase .= "  case '" . $matches[2] . "':\n";
        } else if (preg_match('/else\s*if\s*\(\S*\s*==\s*(\S*)\)/', $fileContentLine, $matches)) {
          $switchCase .= "    break;\n";
          $switchCase .= "  case '" . $matches[1] . "':\n";
        } else if (preg_match('/else\s*{/', $fileContentLine, $matches)) {
          $switchCase .= "    break;\n";
          $switchCase .= "  default:\n";
          $elseFound = true;
        } else if (preg_match('/^\s*}\s*$/', $fileContentLine) && $elseFound) {
          $switchCase .= "    break;\n";
        } else {
          $switchCase .= '  ' . $fileContentLine . "\n";
        }
      }
      $switchCase .= "\n"; 
      return $switchCase;
    } else if ($requested == 'switch') {
    }

    $directoryIterator = new DirectoryIterator($this->configurationDirectory);
    $alternativeGroups = array();
    foreach ($directoryIterator as $file) {
      $filename = $file->getFilename();
      if (!$file->isDot() && preg_match('/^\w*\.conf$/', $filename)) {
        $config = file_get_contents($file->getPathname());
        $configLines = explode("\n", $config);
        foreach ($configLines as $configLine) {
          $groupNameValue = explode("=", $configLine);
          $groupName  = $groupNameValue[0];
          $groupValue = explode(",", $groupNameValue[1]);
          $alternativeConfigs[$filename][$groupName] = $groupValue;
        }
      }
    }

    foreach ($alternativeConfigs as $alternativeConfig) {
      foreach ($alternativeConfig as $alternativeGroup) {
        if (in_array($requested, $alternativeGroup)) {
          $next = false;
          foreach ($alternativeGroup as $alternative) {
            if ($next) {
              return $alternative;
            }
            if ($requested == $alternative) {
              $next = true;
            }
          }
          // If we are here, then the requested value was the last one in the array, thus we return the first one.
          return array_shift($alternativeGroup);
        }
      }
    }
  }
  public function addAlternativeGroup($configName, $groupName, $groupValues)
  {
    // TODO Appending of values to a group.
    // TODO Beautifying the config file.
    // TODO Adding of a literal value, say 'foo,bar'.
    return file_put_contents($this->configurationDirectory . $configName . '.conf', "\n\n$groupName=$groupValues", FILE_APPEND);
  }
}


// TODO Add this whole execution to the class?

// Do away with the filename
array_shift($argv);

// TODO Handling of command-line options needs mending.
$argString = implode(" ", $argv);
$commandLineOptions = getopt($argString);
$alternative = new Alternative();
foreach ($commandLineOptions as $commandLineOption => $commandLineOptionValue) {
  switch ($commandLineOption) {
    case 'a':
      foreach ($argv as $argument) {
        if (!preg_match('/^-/', $argument)) {
          $arguments[] = $argument;
        }
      }
      $alternative->addAlternativeGroup($arguments[0], $arguments[1], $arguments[2]);
      echo 'Added to file ' . $arguments[0] . '.conf the group ' . $arguments[1] . ' with values ' . $arguments[2]; 
      die;
      break;
    default:
      echo 'Unknown option "' . $commandLineOption . '". Bailing out.';
      echo "
        Usage:
        alternate [OPTION]... [FILE]...
        OPTIONS
        -a CONFIGURATION_NAME GROUPNAME GROUP_ALTERNATIVES";
      die;
      break;
  }
}

$requested = array_shift($argv);
$wholeInput = array_shift($argv);
if ($wholeInput) {
  $alternative->fileContent = $wholeInput;
}
echo $alternative->getAlternative($requested);
